const UsersModel = require("../models/usersModel");


/**
 * Trouver un utilisateur par son Google ID.
 * @async
 * @param {string} googleId - L'identifiant Google de l'utilisateur.
 * @returns {Promise<Object|null>} L'utilisateur trouv√© ou null s'il n'existe pas.
 */
const findUserByGoogleId = async (googleId) => {
    return UsersModel.findUserByGoogleId(googleId);
};

/**
 * Trouver un utilisateur par son Facebook ID.
 * @async
 * @param {string} facebookId - L'identifiant Facebook de l'utilisateur.
 * @returns {Promise<Object|null>} L'utilisateur trouv√© ou null s'il n'existe pas.
 */
const findUserByFacebookId = async (facebookId) => {
    return UsersModel.findUserByFacebookId(facebookId);
};

/**
 * Trouver un utilisateur par son ID utilisateur.
 * @async
 * @param {number} userId - L'identifiant de l'utilisateur.
 * @returns {Promise<Object|null>} L'utilisateur trouv√© ou null s'il n'existe pas.
 */
const findUserByUserId = async (userId) => {
    return UsersModel.findUserById(userId);
};

/**
 * Recherche un utilisateur par son num√©ro de licence.
 * @async
 * @param {string} numeroLicence - Le num√©ro de licence de l'utilisateur.
 * @returns {Promise<Object|null>} L'utilisateur trouv√© (contenant `id_user`) ou `null` si aucun utilisateur n'est trouv√©.
 * @throws {Error} En cas d'erreur lors de la requ√™te √† la base de donn√©es.
 */
const findUserByLicence = async (numeroLicence) => {
    return UsersModel.findUserByLicence(numeroLicence);
};

/**
 * Cr√©er un utilisateur avec un Facebook ID.
 * @async
 * @param {string} facebookID - L'identifiant Facebook de l'utilisateur.
 * @returns {Promise<Object>} L'utilisateur cr√©√©.
 */
const createUserFacebook = async (facebookID) => {
    return UsersModel.createFacebookUser(facebookID);
};

/**
 * Cr√©er un utilisateur avec un Google ID.
 * @async
 * @param {string} googleID - L'identifiant Google de l'utilisateur.
 * @returns {Promise<Object>} L'utilisateur cr√©√©.
 */
const createUserGoogle = async (googleID) => {
    return UsersModel.createGoogleUser(googleID);
};
/**
 * Mettre √† jour l'ID adh√©rent d‚Äôun utilisateur.
 * @async
 * @param {number} userId - L'identifiant de l'utilisateur.
 * @param {string} adherantID - Le nouvel identifiant d'adh√©rent.
 * @returns {Promise<Object>} L'utilisateur mis √† jour.
 */
const updateUserLicence = async (userId, adherantID) => {
    return UsersModel.updateAdherantId(userId, adherantID);
};



/**
 * Fusionner les comptes Facebook et Google d'un utilisateur.
 * @async
 * @param {number} userId1 - L'ID du premier utilisateur.
 * @param {number} userId2 - L'ID du second utilisateur.
 * @returns {Promise<Object>} L'utilisateur fusionn√©.
 * @throws {Error} Si un des utilisateurs est introuvable ou si la fusion est impossible.
 */
const mergeUserFacebookAndGoogleIds = async (userId1, userId2) => {
    try {
        const user1 = await UsersModel.findUserById(userId1);
        const user2 = await UsersModel.findUserById(userId2);

        if (!user1 || !user2) {
            throw new Error(`‚ùå Fusion impossible : L'un des utilisateurs (ID: ${userId1}, ID: ${userId2}) est introuvable.`);
        }

        const user1HasGoogle = !!user1.google_id;
        const user1HasFacebook = !!user1.facebook_id;
        const user2HasGoogle = !!user2.google_id;
        const user2HasFacebook = !!user2.facebook_id;

        if (user1HasGoogle && user2HasFacebook) {
            await UsersModel.deleteUserById(userId2);
            await UsersModel.updateFacebookId(userId1, user2.facebook_id);
            console.log(`‚úÖ Fusion r√©ussie : Google ID conserv√©, Facebook ID fusionn√© sous user ${userId1}`);
        }
        else if (user1HasFacebook && user2HasGoogle) {
            await UsersModel.deleteUserById(userId2);
            await UsersModel.updateGoogleId(userId1, user2.google_id);
            console.log(`‚úÖ Fusion r√©ussie : Facebook ID conserv√©, Google ID fusionn√© sous user ${userId1}`);
        }
        else {
            // üîπ Cas o√π la fusion est impossible avec des raisons pr√©cises
            if (user1HasGoogle && user2HasGoogle) {
                throw new Error(`‚ùå Fusion impossible : Les deux comptes (ID: ${userId1}, ID: ${userId2}) sont d√©j√† li√©s √† Google.`);
            }
            if (user1HasFacebook && user2HasFacebook) {
                throw new Error(`‚ùå Fusion impossible : Les deux comptes (ID: ${userId1}, ID: ${userId2}) sont d√©j√† li√©s √† Facebook.`);
            }
            if (!user1HasGoogle && !user1HasFacebook && !user2HasGoogle && !user2HasFacebook) {
                throw new Error(`‚ùå Fusion impossible : Aucun des comptes (ID: ${userId1}, ID: ${userId2}) n'est li√© √† Google ou Facebook.`);
            }
            throw new Error(`‚ùå Fusion impossible : Les comptes (ID: ${userId1}, ID: ${userId2}) n'ont pas de services distincts (Google & Facebook).`);
        }

        // Retourner l'utilisateur mis √† jour apr√®s la fusion
        return await UsersModel.findUserById(userId1);

    } catch (err) {
        console.error("‚ùå Erreur lors de la fusion des comptes :", err);
        throw err;
    }
};

// ‚úÖ Exportation des fonctions
module.exports = {
    findUserByGoogleId,
    findUserByFacebookId,
    findUserByUserId,
    findUserByLicence,
    createUserFacebook,
    createUserGoogle,
    updateUserLicence,
    mergeUserFacebookAndGoogleIds,

};