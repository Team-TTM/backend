const xlsx = require('xlsx');
const AdherentsModel = require('../models/adherantModel');
const Adherent = require('../models/Adherent');
const {insertLicenceSaisonAssociation} = require('../models/licenceSaisonAssociationModel');
const {insertIfNotExists} = require('../models/saisonModel');


/**
 * Charge les donn√©es √† partir d'un fichier Excel (XLSX).
 * @param {string} fichierXlsx - Le chemin vers le fichier Excel √† charger.
 * @returns {Object[]} - Retourne les donn√©es sous forme de tableau d'objets JSON repr√©sentant les lignes du fichier.
 */
function chargerDonneesExcel(fichierXlsx) {
    const workbook = xlsx.readFile(fichierXlsx);
    const sheetName = workbook.SheetNames[0];
    const sheet = workbook.Sheets[sheetName];
    return xlsx.utils.sheet_to_json(sheet);
}


/**
 * Cr√©e un nouvel adh√©rent dans la base de donn√©es via le mod√®le AdherentsModel.
 * @param {Adherent} adherent - L'objet Adherent √† ins√©rer dans la base de donn√©es.
 * @returns {Promise} - Une promesse qui se r√©sout lorsque l'adh√©rent est cr√©√©.
 */
const createAdherent = async (adherent) => {
    await Promise.all([
        AdherentsModel.createAdherent(adherent),
        insertIfNotExists(adherent.getDerniereSaison())
    ]);
    await insertLicenceSaisonAssociation(adherent.getDerniereSaison(), adherent.numeroLicence);
};

/**
 * Met √† jour un adh√©rent existant dans la base de donn√©es.
 * @param {Adherent} adherent - Les nouvelles donn√©es de l'adh√©rent √† mettre √† jour.
 * @returns {Promise} - Une promesse indiquant le succ√®s ou l'√©chec de la mise √† jour.
 */
const updateAdherent = async (adherent) => {
    const adherentData = await AdherentsModel.getAdherentDetails(adherent.numeroLicence);

    const adherentFromDb = Adherent.fromDataBase(adherentData);

    if (adherent.getDerniereSaison() > adherentFromDb.getDerniereSaison()) {
        adherent.merge(adherentFromDb);
        console.log(adherent);
        await insertIfNotExists(adherent.getDerniereSaison());
        await Promise.all([
            insertLicenceSaisonAssociation(adherent.getDerniereSaison(), adherent.numeroLicence),
            AdherentsModel.updateAdherent(adherent)
        ]);

        console.log('in b');
        const data = await AdherentsModel.getAdherentDetails(adherent.numeroLicence);
        console.log(data);
    }
};

/**
 * Transforme les donn√©es provenant d'un fichier Excel en une liste d'objets Adherent.
 * @param {Object[]} donnees - Le tableau de donn√©es extrait du fichier Excel.
 * @returns {Promise<Adherent[]>} - Une promesse qui se r√©sout avec un tableau d'objets Adherent.
 */
async function transformerDonneesEnAdherents(donnees) {
    const adherents = [];

    for (const row of donnees) {
        adherents.push(Adherent.fromCSV(row));
    }
    return adherents;
}

/**
 * Importe les donn√©es √† partir d'un fichier Excel et les ins√®re dans la base de donn√©es.
 * @param {string} fichierXlsx - Le chemin vers le fichier Excel √† importer.
 * @returns {Promise} - Une promesse qui se r√©sout apr√®s l'importation compl√®te des donn√©es.
 */
async function importerXlsx(fichierXlsx) {
    try {
        console.log('üìÇ Chargement du fichier Excel...');
        const donnees = chargerDonneesExcel(fichierXlsx);
        console.log('üîÑ Conversion des donn√©es..');
        const adherents = await transformerDonneesEnAdherents(donnees);
        console.log('üõ†Ô∏è Importation des donn√©es dans la base de donn√©es...');

        let ajoutCount = 0;
        let majCount = 0;

        for (const adherent of adherents) {
            const exist = await checkAdherentLicence(adherent.numeroLicence);
            if (exist) {
                await updateAdherent(adherent);
                majCount++;
            } else {
                await createAdherent(adherent);
                ajoutCount++;
            }
        }

        console.log(`‚úÖ Importation termin√©e avec succ√®s. ${ajoutCount} documents ajout√©s, ${majCount} documents mis √† jour.`);
    } catch (err) {
        console.error('‚ùå Erreur lors de l\'importation :', err.message);
    }
}


/**
 * V√©rifie si un adh√©rent existe en base de donn√©es.
 * @param {string} num_licence - Le num√©ro de licence de l'adh√©rent.
 * @returns {Promise<boolean>} - Retourne `true` si l'adh√©rent existe, sinon `false`.
 */
async function checkAdherentLicence(num_licence) {
    return AdherentsModel.adherentExist(num_licence);
}

module.exports = {importerXlsx, checkAdherentLicence};