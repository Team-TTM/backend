const pool = require('../../config/database');
const User = require('../entities/User');// Connexion √† la base de donn√©es


/**
 * Ins√®re un utilisateur avec un Facebook ID.
 * @async
 * @param {User} user - L'utilisateur a ins√©r√© avec un ID Facebook.
 * @returns {Promise<number>} L'ID de l'utilisateur ins√©r√©.
 * @throws {Error} En cas d'erreur lors de l'insertion.
 */
const createFacebookUser = async (user) => {
    const query = `
        INSERT INTO users (facebook_id)
            VALUES (?)
                RETURNING *
    `;
    try {
        const [rows] = await pool.execute(query, [user.facebook_id]);
        console.log('‚úÖ Utilisateur Facebook ins√©r√© :', rows[0].user_id);
        return rows[0].user_id;
    } catch (err) {
        console.error('‚ùå Erreur lors de l‚Äôinsertion de l‚Äôutilisateur Facebook:', err);
        throw err;
    }
};


/**
 * Ins√®re un utilisateur avec un Google ID.
 * @async
 * @param {User} user - L'utilisateur √† ins√©rer avec un ID Google.
 * @returns {Promise<number>} L'ID de l'utilisateur ins√©r√©.
 * @throws {Error} En cas d'erreur lors de l'insertion.
 */
const createGoogleUser = async (user) => {
    const query = `
        INSERT INTO users (google_id)
            VALUES (?)
                RETURNING *
    `;
    try {
        const [rows] = await pool.execute(query, [user.google_id]);
        console.log('‚úÖ Utilisateur Google ins√©r√© :', rows[0].user_id);
        return rows[0].user_id;
    } catch (err) {
        console.error('‚ùå Erreur lors de l‚Äôinsertion de l‚Äôutilisateur Google:', err);
        throw err;
    }
};

/**
 * Recherche un utilisateur par son Facebook ID.
 * @async
 * @param {string} facebookId - L'ID Facebook de l'utilisateur.
 * @returns {Promise<User|null>} L'utilisateur trouv√© ou `null` si non trouv√©.
 * @throws {Error} En cas d'erreur de requ√™te.
 */
const findUserByFacebookId = async (facebookId) => {
    const query = `
        SELECT *
        FROM users
        WHERE facebook_id = ?;
    `;
    try {
        const [rows] = await pool.execute(query, [facebookId]);
        if (rows[0]) {
            console.log(`üîç Utilisateur trouv√© avec Facebook ID ${facebookId}:`, rows[0].user_id);
            return User.createUserFromDataBase(rows[0]);
        } else {
            console.log(`üîç Utilisateur non trouv√© avec Facebook ID ${facebookId}`);
            return null;
        }
    } catch (err) {
        console.error('‚ùå Erreur lors de la recherche de l‚Äôutilisateur Facebook:', err);
        throw err;
    }
};

/**
 * Recherche un utilisateur par son Google ID.
 * @async
 * @param {string} googleId - L'ID Google de l'utilisateur.
 * @returns {Promise<User|null>} L'utilisateur trouv√© ou `null` si non trouv√©.
 * @throws {Error} En cas d'erreur de requ√™te.
 */
const findUserByGoogleId = async (googleId) => {
    const query = `
        SELECT *
        FROM users
        WHERE google_id = ?;
    `;
    try {
        const [rows] = await pool.execute(query, [googleId]);
        if (rows[0]) {
            console.log(`üîç Utilisateur trouv√© avec Google ID ${googleId}:`, rows[0].user_id);
            return User.createUserFromDataBase(rows[0]);
        } else {
            console.log(`üîç Utilisateur non trouv√© avec Google ID ${googleId}`);
            return null;
        }
    } catch (err) {
        console.error('‚ùå Erreur lors de la recherche de l‚Äôutilisateur Google:', err);
        throw err;
    }
};

/**
 * Recherche un utilisateur par son num√©ro de licence.
 * @async
 * @param {string} numberLicence - Le num√©ro de licence de l'utilisateur.
 * @returns {Promise<User|null>} L'utilisateur trouv√© (contenant `id_user`) ou `null` si aucun utilisateur n'est trouv√©.
 * @throws {Error} En cas d'erreur lors de la requ√™te √† la base de donn√©es.
 */
const findUserByLicence = async (numberLicence) => {
    const query = `
        SELECT *
        FROM users
        WHERE licence_id = ?;
    `;
    try {
        const [rows] = await pool.execute(query, [numberLicence]);
        if (rows[0]) {
            console.log(`üîç Utilisateur trouv√© avec le num√©ro de licence ${numberLicence}:`, rows[0]);
            return User.createUserFromDataBase(rows[0]);
        } else {
            console.log(`üîç Utilisateur non trouv√© avec le num√©ro de licence ${numberLicence}`);
            return null;
        }

    } catch (err) {
        console.error('‚ùå Erreur lors de la r√©cup√©ration de l‚Äôutilisateur:', err);
        throw err;
    }
};

/**
 * Recherche un utilisateur par son ID utilisateur.
 * @async
 * @param {number} userId - L'ID de l'utilisateur.
 * @returns {Promise<User|null>} L'utilisateur trouv√© ou `null` si non trouv√©.
 * @throws {Error} En cas d'erreur de requ√™te.
 */
const findUserById = async (userId) => {
    const query = `
        SELECT *
        FROM users
        WHERE user_id = ?;
    `;
    try {
        const [rows] = await pool.execute(query, [userId]);
        if (rows[0]) {
            console.log(`üîç Utilisateur trouv√© avec l'user ID ${userId}:`, rows[0]);
            return User.createUserFromDataBase(rows[0]);
        } else {
            console.log(`üîç Utilisateur non trouv√© avec l'user ID ${userId}`);
            return null;
        }
    } catch (err) {
        console.error('‚ùå Erreur lors de la r√©cup√©ration de l‚Äôutilisateur:', err);
        throw err;
    }
};

/**
 /**
 * Met √† jour le Facebook ID d‚Äôun utilisateur.
 * @async
 * @param {User} user - L'utilisateur √† mettre √† jour.
 * @returns {Promise<void>} Une promesse qui se r√©sout lorsque l'utilisateur est mis √† jour.
 * @throws {Error} En cas d'erreur de mise √† jour.
 */
const updateFacebookId = async (user) => {
    const query = `
        UPDATE users
        SET facebook_id = ?
        WHERE user_id = ?
    `;
    try {
        console.log(`‚åõÔ∏è Ajout de Facebook ID: ${user.facebook_id} √† l'utilisateur ID: ${user.id_user}`);
        const [result] = await pool.query(query, [user.facebook_id, user.id_user]);
        if (result.affectedRows > 0) {
            console.log(`‚úÖ Facebook ID mis √† jour pour l'utilisateur ID: ${user.id_user}`);
        }
    } catch (err) {
        console.error('‚ùå Erreur lors de la mise √† jour du Facebook ID:', err);
        throw err;
    }
};

/**
 * Met √† jour le Google ID d‚Äôun utilisateur.
 * @async
 * @param {User} user - L'utilisateur √† mettre √† jour.
 * @returns {Promise<void>} L'utilisateur mis √† jour ou `null` si non trouv√©.
 * @throws {Error} En cas d'erreur de mise √† jour.
 */
const updateGoogleId = async (user) => {
    const query = `
        UPDATE users
        SET google_id = ?
        WHERE user_id = ?;
    `;
    try {
        console.log('‚åõÔ∏è Ajout de googleId :', user.google_id, '√† l\'utilisateur :', user.id_user);
        const [result] = await pool.query(query, [user.google_id, user.id_user]);
        if (result.affectedRows > 0) {
            console.log(`‚úÖGoogle ID mis √† jour pour l'utilisateur ID: ${user.id_user}`);
        }
    } catch (err) {
        console.error('‚ùå Erreur lors de la mise √† jour du Google ID:', err);
        throw err;
    }
};

/**
 * Met √† jour l‚ÄôID adh√©rant d‚Äôun utilisateur.
 * @async
 * @param {User} user - L'utilisateur √† mettre √† jour.
 * @returns {Promise<void>} L'utilisateur mis √† jour ou `null` si non trouv√©.
 * @throws {Error} En cas d'erreur de mise √† jour.
 */
const updateAdherentId = async (user) => {
    const query = `
        UPDATE users
        SET licence_id = ?
        WHERE user_id = ?;
    `;
    try {
        console.log('‚åõÔ∏è Ajout de la licence :', user.licence_id, '√† l\'utilisateur :', user.id_user);
        const [result] = await pool.query(query, [user.licence_id, user.id_user]);
        if (result.affectedRows > 0) {
            console.log(`‚úÖ Num√©ro de licence mis √† jour pour l'utilisateur ID: ${user.id_user}`);
        }
    } catch (err) {
        console.error('‚ùå Erreur lors de la mise √† jour de l‚ÄôID adh√©rant:', err);
        throw err;
    }
};

/**
 * Supprime un utilisateur par son ID.
 * @async
 * @param {Object} user - L'objet utilisateur contenant `id_user` √† supprimer.
 * @returns {Promise<void>} Une promesse qui se r√©sout lorsque l'utilisateur est supprim√©.
 * @throws {Error} En cas d'erreur de suppression.
 */
const deleteUserById = async (user) => {
    const query = `
        DELETE
        FROM users
        WHERE user_id = ?
    `;
    try {
        console.log(`‚åõÔ∏è Suppression de l'utilisateur avec ID: ${user.id_user}`);
        await pool.execute(query, [user.id_user]);
        console.log(`‚úÖ Utilisateur avec ID: ${user.id_user} supprim√©`);
    } catch (err) {
        console.error('‚ùå Erreur lors de la suppression de l‚Äôutilisateur:', err);
        throw err;
    }
};

/**
 * Supprime l'ID Facebook d'un utilisateur.
 * @async
 * @param {Object} user - L'objet utilisateur contenant `id_user` √† mettre √† jour.
 * @returns {Promise<void>} Une promesse qui se r√©sout lorsque l'ID Facebook est supprim√©.
 * @throws {Error} En cas d'erreur de mise √† jour.
 */
const deleteFacebookId = async (user) => {
    const query = `
        UPDATE users
        SET facebook_id = NULL
        WHERE user_id = ?;
    `;
    try {
        console.log(`‚åõÔ∏è Suppression de l'ID Facebook de l'utilisateur avec ID: ${user.id_user}`);
        await pool.execute(query, [user.id_user]);
        console.log(`‚úÖ ID Facebook supprim√© pour l'utilisateur avec ID: ${user.id_user}`);
    } catch (err) {
        console.error('‚ùå Erreur lors de la suppression de l\'ID Facebook de l\'utilisateur:', err);
        throw err;
    }
};

/**
 * Supprime l'ID Google d'un utilisateur.
 * @async
 * @param {Object} user - L'objet utilisateur contenant `id_user` √† mettre √† jour.
 * @returns {Promise<void>} Une promesse qui se r√©sout lorsque l'ID Google est supprim√©.
 * @throws {Error} En cas d'erreur de mise √† jour.
 */
const deleteGoogleId = async (user) => {
    const query = `
        UPDATE users
        SET google_id = NULL
        WHERE user_id = ?;
    `;
    try {
        console.log(`‚åõÔ∏è Suppression de l'ID Google de l'utilisateur avec ID: ${user.id_user}`);
        await pool.execute(query, [user.id_user]);
        console.log(`‚úÖ ID Google supprim√© pour l'utilisateur avec ID: ${user.id_user}`);
    } catch (err) {
        console.error('‚ùå Erreur lors de la suppression de l‚ÄôID Google de l‚Äôutilisateur:', err);
        throw err;
    }
};



module.exports = {
    createFacebookUser,
    createGoogleUser,
    findUserByFacebookId,
    findUserByGoogleId,
    findUserByLicence,
    findUserById,
    updateFacebookId,
    updateGoogleId,
    updateAdherentId,
    deleteUserById,
    deleteFacebookId,
    deleteGoogleId,
};