const client = require('../config/database'); // Connexion √† la base de donn√©es

// üîπ Cr√©ation de la table users
const createUserTable = async () => {
    const query = `
        CREATE TABLE IF NOT EXISTS users (
            id_user SERIAL PRIMARY KEY,
            id_adherant INTEGER UNIQUE,
            role VARCHAR(255) NOT NULL DEFAULT 'user' CHECK (role IN ('user', 'dirigent')),
            charte_signe BOOLEAN NOT NULL DEFAULT FALSE,
            google_id VARCHAR(255) UNIQUE,
            facebook_id VARCHAR(255) UNIQUE,
            newsletter BOOLEAN NOT NULL DEFAULT FALSE,
            FOREIGN KEY (id_adherant) REFERENCES adherants(id_adherant) ON DELETE CASCADE
        );
    `;
    try {
        await client.query(query);
        console.log('‚úÖ Table "users" cr√©√©e ou d√©j√† existante.');
    } catch (err) {
        console.error('‚ùå Erreur lors de la cr√©ation de la table "users":', err);
        throw err;
    }
};

// üîπ Ins√©rer un utilisateur avec un Facebook ID
const createFacebookUser = async (facebookId) => {
    const query = `
        INSERT INTO users (facebook_id)
        VALUES ($1)
        RETURNING *;
    `;
    try {
        const res = await client.query(query, [facebookId]);
        console.log('‚úÖ Utilisateur Facebook ins√©r√© :', res.rows[0]);
        return res.rows[0];
    } catch (err) {
        console.error('‚ùå Erreur lors de l‚Äôinsertion de l‚Äôutilisateur Facebook:', err);
        throw err;
    }
};

// üîπ Ins√©rer un utilisateur avec un Google ID
const createGoogleUser = async (googleId) => {
    const query = `
        INSERT INTO users (google_id)
        VALUES ($1)
        RETURNING *;
    `;
    try {
        const res = await client.query(query, [googleId]);
        console.log('‚úÖ Utilisateur Google ins√©r√© :', res.rows[0]);
        return res.rows[0];
    } catch (err) {
        console.error('‚ùå Erreur lors de l‚Äôinsertion de l‚Äôutilisateur Google:', err);
        throw err;
    }
};

// üîπ Trouver un utilisateur via son Facebook ID
const findUserByFacebookId = async (facebookId) => {
    const query = `
        SELECT * FROM users
        WHERE facebook_id = $1;
    `;
    try {
        const res = await client.query(query, [facebookId]);
        return res.rows[0] || null;
    } catch (err) {
        console.error('‚ùå Erreur lors de la recherche de l‚Äôutilisateur Facebook:', err);
        throw err;
    }
};

// üîπ Trouver un utilisateur via son Google ID
const findUserByGoogleId = async (googleId) => {
    const query = `
        SELECT * FROM users
        WHERE google_id = $1;
    `;
    try {
        const res = await client.query(query, [googleId]);
        return res.rows[0] || null;
    } catch (err) {
        console.error('‚ùå Erreur lors de la recherche de l‚Äôutilisateur Google:', err);
        throw err;
    }
};

// üîπ Trouver un utilisateur via son ID utilisateur
const findUserById = async (userId) => {
    const query = `
        SELECT * FROM users
        WHERE id_user = $1;
    `;
    try {
        const res = await client.query(query, [userId]);
        return res.rows[0] || null;
    } catch (err) {
        console.error('‚ùå Erreur lors de la r√©cup√©ration de l‚Äôutilisateur:', err);
        throw err;
    }
};

// üîπ Mettre √† jour le Facebook ID d‚Äôun utilisateur
const updateFacebookId = async (userId, facebookId) => {
    const query = `
        UPDATE users
        SET facebook_id = $2
        WHERE id_user = $1
        RETURNING *;
    `;
    try {
        const res = await client.query(query, [userId, facebookId]);
        return res.rows[0] || null;
    } catch (err) {
        console.error('‚ùå Erreur lors de la mise √† jour du Facebook ID:', err);
        throw err;
    }
};

// üîπ Mettre √† jour le Google ID d‚Äôun utilisateur
const updateGoogleId = async (userId, googleId) => {
    const query = `
        UPDATE users
        SET google_id = $2
        WHERE id_user = $1
        RETURNING *;
    `;
    try {
        const res = await client.query(query, [userId, googleId]);
        return res.rows[0] || null;
    } catch (err) {
        console.error('‚ùå Erreur lors de la mise √† jour du Google ID:', err);
        throw err;
    }
};

// üîπ Mettre √† jour l‚ÄôID adh√©rant d‚Äôun utilisateur
const updateAdherantId = async (userId, adherantId) => {
    const query = `
        UPDATE users
        SET id_adherant = $2
        WHERE id_user = $1
        RETURNING *;
    `;
    try {
        const res = await client.query(query, [userId, adherantId]); // Correction du mauvais param√®tre
        return res.rows[0] || null;
    } catch (err) {
        console.error('‚ùå Erreur lors de la mise √† jour de l‚ÄôID adh√©rant:', err);
        throw err;
    }
};

// üîπ Supprimer un utilisateur par ID
const deleteUserById = async (userId) => {
    const query = `
        DELETE FROM users
        WHERE id_user = $1
        RETURNING *;
    `;
    try {
        const res = await client.query(query, [userId]);
        return res.rows[0] || null;
    } catch (err) {
        console.error('‚ùå Erreur lors de la suppression de l‚Äôutilisateur:', err);
        throw err;
    }
};

// ‚úÖ Exportation des fonctions
module.exports = {
    createUserTable,
    createFacebookUser,
    createGoogleUser,
    findUserByFacebookId,
    findUserByGoogleId,
    findUserById,
    updateFacebookId,
    updateGoogleId,
    updateAdherantId,
    deleteUserById,
};